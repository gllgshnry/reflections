1. What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates a .git file, which contains the metadata for
the repository. Initialization does not commit any of the files, meaning that
there are no files being tracked as of the creation of the repository. 
git status will inform you of what is present in the directory/repository, yet
untracked. 


2. How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area only contains files that you want tracked, where the working
directory contains all the files in it. This allows the user to commit only the
files that have had a logical change, or that need to be tracked together. 


3. How can you use the staging area to make sure you have one commit per logical
change?

You can use the commands "git diff" and "git diff --staged" to look at the
changes between the latest commit and the current file that is in the working
directory. This shows whether a large enough change has been performed to commit
as well as to see what is going to be committed. If there is any discrepancy it 
can be shown using the previous commands including "git status" to see what else
is on the working directory.

4. What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches are helpful to keep track of unofficial changes such as creating a new
mode for a game, an alternate language version of your code or project, or
anything that is a significant change from the main project. It can be used to
experiment with new ideas that are not essential to the main project, but are
worth keeping track. Using branches ensures that the main project or "master"
is kept separate from the side projects.


5. How do the diagrams help you visualize the branch structure?

The master branch is a single flow, as it only contains the reachable commits.
Any branches are then shown by using a line that branches off from the last
commit used in master branch. o------o-------o--------o--------o (master)
                                     \-------o--------o(branch)

6. What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

Merging two branches causes the changes that are common in both branches to be
consolidated, meaning they are incorporated into one commit. In addition any
additions done in one branch will also be added to the new commit. Any changes
that involved removal from the common parent will stay removed in the final
commit. Git tries to incorporate these changes, which involve both branches,
and can be represented as one node in the diagram. The node then has as parents
both the previous commits that were involved in the merge. Hence two nodes meet
at the merged node.


7. What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

Pros: automatic merging saves the tedious work of going back and forth between
different codes and seeing what is different, the automatic merge simply unites
the two. Automatic merging will also detect conflicts and inform the user so
the user can have more input into the merge.
Cons: the fact that conflicts may exist can significantly slow the coding
process. An automatic merge may merge certain points that are undesirable, Git
does its best to determine the best merging method, where a manual merge would
catch the desired traits.


8. 